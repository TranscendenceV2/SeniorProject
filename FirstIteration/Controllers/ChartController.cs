using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using FirstIteration.Models;
using DotNet.Highcharts.Options;
using DotNet.Highcharts.Helpers;
using System.Collections;
using System.Data;
using FirstIteration.Services;


// The main function of this controller is to format data that is returned from services
// also loads viewbags for the list of years and departments contained within the DB
namespace FirstIteration.Controllers
{
    public class ChartController : Controller
    {
        // service instantiations
        private readonly StaffListServices StaffService = new StaffListServices();
        private readonly FundingSourceServices FundService = new FundingSourceServices();
        private readonly DropDownServices DropDownService = new DropDownServices();
        private readonly BarAndLineServices BarService = new BarAndLineServices();
        private readonly PieChartServices PieService = new PieChartServices();
        private readonly ImportServices ImportService = new ImportServices();

        public ActionResult Dashboard()
        {
            // load department and year lists
            ViewBag.Department = DropDownService.GetAllDepartments();
            ViewBag.Year = DropDownService.GetAllYears();
            return View();
        }

        public PartialViewResult _FundingSourceDropDowns()
        {
            // load department and year lists for partial view
            ViewBag.Department = DropDownService.GetAllDepartments();
            ViewBag.Year = DropDownService.GetAllYears();
            return PartialView();
        }

        public PartialViewResult _EmployeeDropDowns()
        {
            // load department and year lists for partial view
            ViewBag.Department = DropDownService.GetAllDepartments();
            ViewBag.Year = DropDownService.GetAllYears();
            return PartialView();
        }

        // below methods load the partial views which contain each graph
        public ActionResult _BarChart()
        {
            return View();
        }

        public ActionResult _LineChart()
        {
            return View();
        }

        public ActionResult _PieChart()
        {
            return View();
        }

        // modal for uploading csv to database
        [HttpGet]
        public ActionResult UploadModal(string id)
        {
            ViewBag.UploadType = id.Replace("_", " ");
            return PartialView();
        }

        [HttpPost]
        public ActionResult UploadCsv()
        {
            HttpPostedFile file = System.Web.HttpContext.Current.Request.Files["CsvUpload"];
            string targetTable = System.Web.HttpContext.Current.Request.Form["UploadType"];
            return ImportService.Import(file, targetTable);
        }

        // returns the list of staff by department
        public JsonResult StaffList(int Id)
        {
            var staffList = StaffService.GetStaffList(Id);
            var list = staffList.Select(m => new { value = m.StaffID, text = m.StaffName });
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        // returns list of funding categories by department
        public JsonResult FundingCategoryList(int Id)
        {
            var fundCategoryList = FundService.GetFundingCategoryList(Id);
            return Json(fundCategoryList, JsonRequestBehavior.AllowGet);
        }

        // return list of fund code names by fund category
        public JsonResult FundingCodeNameList(int Id, string Category)
        {
            var fundCodeNameList = FundService.GetFundCodeNameList(Id, Category);
            return Json(fundCodeNameList, JsonRequestBehavior.AllowGet);
        }

        // the below methods pull and format data generated by the service 
        //based upon the information provided by user from dropdownlists
        public JsonResult LineData(int? Year, int? Id, string Source, int? Employee)
        {
            var allData = BarService.GetDataForLine(Year, Id, Source, Employee).GroupBy(g => g.Category).Select(m => new { name = m.Key, data = m.Select(l => l.Amount).ToList() });
            return Json(allData, JsonRequestBehavior.AllowGet);           
        }

        public JsonResult BarData(int? Year, int? Id, string Source, int? Employee, string X)
        {
            X = X ?? "All Revenue by Month";
            var allData = BarService.GetDataForBar(Year, Id, Source, Employee).GroupBy(m => m.Category).Select(m => new { name = X, data = m.Select(j => j.Amount).ToList() });
            return Json(allData, JsonRequestBehavior.AllowGet);
        }

        public JsonResult PieData(int? Year, int? Id, string Source, int? Employee)
        {                                                    
            var categories = PieService.GetCategoriesForPie(Year, Id, Source, Employee);
            var test = new { name = "Clay Revenue", data = categories.Select(l => new { name = l.Category, y = l.Amount }) };
            return Json(test, JsonRequestBehavior.AllowGet);     
        }
    }
}
